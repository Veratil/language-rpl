'comment': 'RPL Syntax: version 1.1'
'fileTypes': [
    'rpl'
]
'name': 'Rosie Pattern Language (RPL)'
'scopeName': 'source.rpl'
'patterns': [
    {
        'match': '^(rpl) (\\d{1,2}\\.\\d{1,2})$'
        'name': 'meta.version.rpl'
        'captures':
            '1':
                'name': 'keyword.control.rpl'
            '2':
                'name': 'constant.numeric.version.major.rpl'
            '3':
                'name': 'constant.numeric.version.minor.rpl'
    }
    {
        'match': '^(package)\\s+([^\\s]+)$'
        'captures':
            '1':
                'name': 'keyword.control.rpl'
            '2':
                'patterns': [
                    {
                        'include': '#identifier'
                    }
                ]
    }
    {
        'match': '^(import)\\s+([^\\s]+)(?:\\s+(as)\\s+([^\\s]+))?$'
        'captures':
            '1':
                'name': 'keyword.control.rpl'
            '2':
                'patterns': [
                    {
                        'include': '#identifier'
                    }
                ]
            '3':
                'name': 'keyword.operator.rpl'
            '4':
                'patterns': [
                    {
                        'include': '#identifier'
                    }
                ]
    }
    {
        'begin': '^(grammar)$'
        'beginCaptures':
            '1':
                'name': 'storage.type.rpl'
        'end': '^(end)$'
        'endCaptures':
            '1':
                'name': 'storage.type.rpl'
        'name': 'meta.grammar.rpl'
        'patterns': [
            {
                'include': '$self'
            }
        ]
    }
    {
        'match': '\\b(?:(local)|(alias))\\b'
        'captures':
            '1':
                'name': 'storage.type.rpl'
            '2':
                'name': 'storage.modifier.rpl'
    }
    {
        'include': '#identifier'
    }
    {
        'match': '(!)|(@)|(=)|(/)'
        'captures':
            '1':
                'name': 'keyword.operator.lookahead.not.rpl'
            '2':
                'name': 'keyword.operator.lookahead.at.rpl'
            '3':
                'name': 'keyword.operator.assignment.rpl'
            '4':
                'name': 'keyword.control.choice.rpl'
    }
    {
        'match': '\\?|\\+|\\*|{(\\d+),(\\d+)}'
        'name': 'keyword.operator.quantifier.rpl'
        'captures':
            '1':
                'name': 'constant.numeric.rpl'
            '2':
                'name': 'constant.numeric.rpl'
    }
    {
        'name': 'meta.group.raw.rpl'
        'begin': '({)'
        'beginCaptures':
            '1':
                'name': 'keyword.operator.group.raw.rpl'
        'end': '(})'
        'endCaptures':
            '1':
                'name': 'keyword.operator.group.raw.rpl'
        'patterns': [
            {
                'include': '$self'
            }
        ]
    }
    {
        'name': 'meta.group.cooked.rpl'
        'begin': '(\\()'
        'beginCaptures':
            '1':
                'name': 'keyword.operator.group.cooked.rpl'
        'end': '(\\))'
        'endCaptures':
            '1':
                'name': 'keyword.operator.group.cooked.rpl'
        'patterns': [
            {
                'include': '$self'
            }
        ]
    }
    {
        'include': '#union-class'
    }
    {
        'include': '#named-class'
    }
    {
        'include': '#range-class'
    }
    {
        'include': '#list-class'
    }
    {
        'include': '#string_dq'
    }
    {
        'include': '#test-line'
    }
    {
        'include': '#line-comment'
    }
]
'repository':
    'union-class':
        'match': '(\\[\\^(\\[.+?])])|(\\[(\\[.+?])])'
        'name': 'meta.class.union.rpl'
        'captures':
            '1':
                'name': 'constant.other.class.union.negated.rpl'
            '2':
                'patterns': [
                    {
                        'include': '#named-class'
                    }
                    {
                        'include': '#range-class'
                    }
                    {
                        'include': '#list-class'
                    }
                ]
            '3':
                'name': 'constant.other.class.union.rpl'
            '4':
                'patterns': [
                    {
                        'include': '#named-class'
                    }
                    {
                        'include': '#range-class'
                    }
                    {
                        'include': '#list-class'
                    }
                ]
    'named-class':
        'match': '(\\[\\^:[A-Za-z]+:])|(\\[:[A-Za-z]+:])'
        'captures':
            '1':
                'name': 'constant.other.class.named.negated.rpl'
            '2':
                'name': 'constant.other.class.named.rpl'
    'range-class':
        'match': '(\\[\\^(?:[^\\[^\\]]|\\.)-(?:[^\\[^\\]]|\\.)])|(\\[(?:[^\\[^\\]]|\\.)-(?:[^\\[^\\]]|\\.)])'
        'captures':
            '1':
                'name': 'constant.other.class.range.negated.rpl'
            '2':
                'name': 'constant.other.class.range.rpl'
    'list-class':
        'match': '(\\[\\^[^\\]]+?])|(\\[[^\\]]+?])'
        'captures':
            '1':
                'name': 'constant.other.class.list.negated.rpl'
            '2':
                'name': 'constant.other.class.list.rpl'
    'string_dq':
        'begin': '(")'
        'beginCaptures':
            '1':
                'name': 'punctuation.definition.string.begin.rpl'
        'end': '((?<=")(")|")|(\\n)'
        'endCaptures':
            '1':
                'name': 'punctuation.definition.string.end.rpl'
            '2':
                'name': 'meta.empty-string.rpl'
            '3':
                'name': 'invalid.illegal.rpl'
        'name': 'string.rpl'
        'patterns': [
            {
                'include': '#escaped_char'
            }
        ]
    'escaped_char':
        'match': '\\\\.'
        'name': 'constant.character.escape.rpl'
    'identifier':
        'match': '\\b(?:([A-Za-z][A-Za-z0-9_]*)(\\.)([A-Za-z][A-Za-z0-9_]*))|([A-Za-z][A-Za-z0-9_]*)\\b'
        'captures':
            '1':
                'name': 'support.class.rpl'
            '2':
                'name': 'keyword.operator.rpl'
            '3':
                'name': 'variable.rpl'
            '4':
                'name': 'variable.rpl'
    'line-comment':
        # Use lookbehind and lookahead to make sure it's not within a construct
        # Currently ensure not within a string
        'match': '((?<!["])--(?!["]).*)'
        'captures':
            '1':
                'name': 'comment.rpl'
    'test-line':
        'match': '^(--\\s+test)\\s+\\b([^\\s]+)\\b\\s+([^"]+)\\s+(?:(.+))'
        'name': 'meta.test.rpl'
        'captures':
            '1':
                'name': 'keyword.other.test.rpl'
            '2':
                'patterns': [
                    {
                        'include': '#identifier'
                    }
                ]
            '3':
                'patterns': [
                    {
                        'include': '#test-command'
                    }
                ]
            '4':
                'patterns': [
                    {
                        'include': '#string_dq'
                    }
                ]
    'test-command':
        'name': 'meta.test.command.rpl'
        'match': '(accepts)|(rejects)|(contains)\\s+([^\\s]+)(?:\\s+(R?[BD]FS))?'
        'captures':
            '1':
                'name': 'keyword.other.test.command.accepts.rpl'
            '2':
                'name': 'keyword.other.test.command.rejects.rpl'
            '3':
                'name': 'keyword.other.test.command.contains.rpl'
            '4':
                'patterns': [
                    {
                        'include': '#identifier'
                    }
                ]
            '5':
                'name': 'keyword.other.test.command.contains.search-order.rpl'
'scopeName': 'source.rpl'
